import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Side
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.worksheet import Worksheet

from .glycan import NGlycan
from .trait import build_meta_property_table, TraitFormula, load_default_formulas


def run_workflow(input_file: str, output_file: str, sia_linkage: bool = False) -> None:
    """Run the workflow."""
    glycans, abund_df = read_input(input_file)
    formulas = list(load_default_formulas())
    if not sia_linkage:
        formulas = [f for f in formulas if f.sia_linkage is False]
    meta_prop_df = build_meta_property_table(abund_df.columns, glycans, sia_linkage)
    trait_df = calcu_trait(abund_df, meta_prop_df, formulas)
    write_output(output_file, trait_df, abund_df, meta_prop_df, formulas)


def read_input(file: str) -> tuple[list[NGlycan], pd.DataFrame]:
    """Read the input file.

    The first column should be the glycan IDs. The composotion will do. The second column should
    be the glycan structure strings. The rest columns should be the abundance of the glycans in
    different samples.

    An example of the input file:
    ```
    ID, Structure, Sample1, Sample2, Sample3
    H3N4S1, some_glycoct, 2.3, 1.2, 3.4
    H5N4S1, another_glycoct, 1.2, 2.3, 3.4
    ```

    Args:
        file (str): The input csv or xlsx file.

    Returns:
        glycans (list[NGlycan]): The glycans.
        abundance_table (pd.DataFrame): The abundance table, with samples as index and glycan IDs
            as columns.
    """
    df = pd.read_csv(file, index_col=0)
    glycans = [NGlycan.from_glycoct(structure) for structure in df["Structure"]]
    abundance_table = df.drop(columns=["Structure"]).T
    return glycans, abundance_table


def calcu_trait(
    abund_df: pd.DataFrame,
    meta_prop_df: pd.DataFrame,
    formulas: list[TraitFormula],
) -> pd.DataFrame:
    """Calculate the trait values.

    Args:
        abund_df (pd.DataFrame): The abundance table, with samples as index and glycan IDs
            as columns.
        meta_prop_df (pd.DataFrame): The table of meta properties generated by
            `build_meta_property_table`.
        formulas (list[TraitFormula]): The trait formulas.

    Returns:
        pd.DataFrame: The trait values, with samples as index and trait names as columns.
    """
    trait_series: list[pd.Series] = []
    for formula in formulas:
        formula.initialize(meta_prop_df)
        trait_s = pd.Series(
            data=formula.calcu_trait(abund_df), index=abund_df.index, name=formula.name
        )
        trait_series.append(trait_s)
    return pd.concat(trait_series, axis=1)


def write_output(
    file: str,
    trait_df: pd.DataFrame,
    abundance_df: pd.DataFrame,
    meta_prop_df: pd.DataFrame,
    formulas: list[TraitFormula],
) -> None:
    """Write the output file.

    Args:
        file (str): The output csv or xlsx file.
        trait_df (pd.DataFrame): The trait values, with samples as index and trait names as
            columns.
        abundance_df (pd.DataFrame): The abundance table, with samples as index and glycan IDs
            as columns.
        meta_prop_df (pd.DataFrame): The table of meta properties generated by
            `build_meta_property_table`.
        formulas (list[TraitFormula]): The trait formulas.
    """
    wb = Workbook()

    # The abundance table
    ws1: Worksheet = wb.active
    ws1.title = "Trait values"
    combined_df = pd.concat([abundance_df, trait_df], axis=1)

    for row in dataframe_to_rows(combined_df, index=True, header=True):
        ws1.append(row)
    ws1.delete_rows(2)
    for cell in ws1[1][1:]:
        cell.font = cell.font.copy(bold=True)
        cell.border = cell.border.copy(bottom=Side(border_style="double"))
    ws1.insert_rows(1)
    ws1.merge_cells(
        start_row=1, start_column=2, end_row=1, end_column=len(abundance_df.columns) + 1
    )
    ws1.cell(1, 2).value = "Direct traits"
    ws1.merge_cells(
        start_row=1,
        start_column=len(abundance_df.columns) + 2,
        end_row=1,
        end_column=len(combined_df.columns) + 1,
    )
    ws1.cell(1, len(abundance_df.columns) + 2).value = "Derived traits"
    for cell in ws1[1][1:]:
        cell.font = cell.font.copy(bold=True)
        cell.border = cell.border.copy(bottom=Side(border_style="thin"))

    # The trait definitions
    ws2 = wb.create_sheet("Trait definitions")
    ws2.append(["Trait Name", "Description"])
    for cell in ws2[1]:
        cell.font = cell.font.copy(bold=True)
    for formula in formulas:
        ws2.append([formula.name, formula.description])

    # The meta properties
    ws3 = wb.create_sheet("Meta properties")
    for row in dataframe_to_rows(meta_prop_df, index=True, header=True):
        ws3.append(row)
    ws3.delete_rows(2)
    for cell in ws3[1]:
        cell.font = cell.font.copy(bold=True)

    wb.save(file)
